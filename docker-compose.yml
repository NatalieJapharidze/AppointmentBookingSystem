services:
  postgres:
    image: postgres:16-alpine
    container_name: appointment_booking_db
    environment:
      POSTGRES_DB: AppointmentBooking
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5400:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    networks:
      - appointment_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d AppointmentBooking"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  appointment_api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: appointment_booking_api
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__DefaultConnection=Host=postgres;Port=5432;Database=AppointmentBooking;Username=postgres;Password=password123;Include Error Detail=true
      - EmailSettings__EnableEmailSending=false
      - EmailSettings__SmtpServer=smtp.gmail.com
      - EmailSettings__SmtpPort=587
      - EmailSettings__FromEmail=noreply@appointmentbooking.com
      - EmailSettings__FromName=Appointment Booking System
    ports:
      - "5085:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - appointment_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  appointment_network:
    driver: bridge